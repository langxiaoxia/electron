From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xiaoxia Lang <xxlang@grandstream.cn>
Date: Tue, 20 Dec 2022 11:59:53 +0800
Subject: feat: add CopyPlaneWithAlpha.

Add CopyPlaneWithAlpha for window capturer mask.

diff --git a/include/libyuv/planar_functions.h b/include/libyuv/planar_functions.h
index f7c6db8046695c0a8f20c649c87c7197637e344f..ee3be325569650c7be4a3e3526a49d1243b6f6de 100644
--- a/include/libyuv/planar_functions.h
+++ b/include/libyuv/planar_functions.h
@@ -49,6 +49,14 @@ void CopyPlane(const uint8_t* src_y,
                int width,
                int height);
 
+LIBYUV_API
+void CopyPlaneWithAlpha(const uint8_t* src_y,
+               int src_stride_y,
+               uint8_t* dst_y,
+               int dst_stride_y,
+               int width,
+               int height); //+by xxlang : window mask
+
 LIBYUV_API
 void CopyPlane_16(const uint16_t* src_y,
                   int src_stride_y,
diff --git a/include/libyuv/row.h b/include/libyuv/row.h
index 7ef0000b3e2c5c55a2d152369470b9870edc57f2..b9a9906be0e66854e57b9deb9bb3a6d9435a4aa1 100644
--- a/include/libyuv/row.h
+++ b/include/libyuv/row.h
@@ -2684,6 +2684,7 @@ void CopyRow_ERMS(const uint8_t* src, uint8_t* dst, int width);
 void CopyRow_NEON(const uint8_t* src, uint8_t* dst, int width);
 void CopyRow_MIPS(const uint8_t* src, uint8_t* dst, int count);
 void CopyRow_C(const uint8_t* src, uint8_t* dst, int count);
+void CopyRowWithAlpha_C(const uint8_t* src, uint8_t* dst, int count); //+by xxlang : window mask
 void CopyRow_Any_SSE2(const uint8_t* src_ptr, uint8_t* dst_ptr, int width);
 void CopyRow_Any_AVX(const uint8_t* src_ptr, uint8_t* dst_ptr, int width);
 void CopyRow_Any_NEON(const uint8_t* src_ptr, uint8_t* dst_ptr, int width);
diff --git a/source/planar_functions.cc b/source/planar_functions.cc
index fae8630e9579cd203e5879555c0ad958a4f39976..62339988ae888ac7a43ee07a13b8e39f099fd039 100644
--- a/source/planar_functions.cc
+++ b/source/planar_functions.cc
@@ -84,6 +84,42 @@ void CopyPlane(const uint8_t* src_y,
   }
 }
 
+//+by xxlang : window mask {
+LIBYUV_API
+void CopyPlaneWithAlpha(const uint8_t* src_y,
+               int src_stride_y,
+               uint8_t* dst_y,
+               int dst_stride_y,
+               int width,
+               int height) {
+  int y;
+  void (*CopyRow)(const uint8_t* src, uint8_t* dst, int width) = CopyRowWithAlpha_C;
+  // Negative height means invert the image.
+  if (height < 0) {
+    height = -height;
+    dst_y = dst_y + (height - 1) * dst_stride_y;
+    dst_stride_y = -dst_stride_y;
+  }
+  // Coalesce rows.
+  if (src_stride_y == width && dst_stride_y == width) {
+    width *= height;
+    height = 1;
+    src_stride_y = dst_stride_y = 0;
+  }
+  // Nothing to do.
+  if (src_y == dst_y && src_stride_y == dst_stride_y) {
+    return;
+  }
+
+  // Copy plane
+  for (y = 0; y < height; ++y) {
+    CopyRow(src_y, dst_y, width);
+    src_y += src_stride_y;
+    dst_y += dst_stride_y;
+  }
+}
+//+by xxlang : window mask }
+
 LIBYUV_API
 void CopyPlane_16(const uint16_t* src_y,
                   int src_stride_y,
diff --git a/source/row_common.cc b/source/row_common.cc
index 9d94ab289f813fe00f6c9c1ab8e4c22e6cbbfca6..7cf012e9962f719cc2a19f210c52b00ba09ed3b8 100644
--- a/source/row_common.cc
+++ b/source/row_common.cc
@@ -3049,6 +3049,25 @@ void CopyRow_C(const uint8_t* src, uint8_t* dst, int count) {
   memcpy(dst, src, count);
 }
 
+//+by xxlang : window mask {
+void CopyRowWithAlpha_C(const uint8_t* src, uint8_t* dst, int count) {
+  int x;
+  for (x = 0; x < count / 4; ++x) {
+    uint8_t b = src[0];
+    uint8_t g = src[1];
+    uint8_t r = src[2];
+    if (b == 0 && g == 0 && r == 0) { // background
+    } else {
+      dst[0] = b;
+      dst[1] = g;
+      dst[2] = r;
+    }
+    dst += 4;
+    src += 4;
+  }
+}
+//+by xxlang : window mask }
+
 void CopyRow_16_C(const uint16_t* src, uint16_t* dst, int count) {
   memcpy(dst, src, count * 2);
 }
