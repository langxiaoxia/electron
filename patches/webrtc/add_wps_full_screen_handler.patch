From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Xiaoxia Lang <xxlang@grandstream.cn>
Date: Mon, 20 Dec 2021 11:13:10 +0800
Subject: add_wps_full_screen_handler


diff --git a/modules/desktop_capture/mac/full_screen_mac_application_handler.cc b/modules/desktop_capture/mac/full_screen_mac_application_handler.cc
index 36e16cbe54e50d3818a98bebf1399bf49595987c..a8533e5282df8d7f77b834a0ce8754d148b765e8 100644
--- a/modules/desktop_capture/mac/full_screen_mac_application_handler.cc
+++ b/modules/desktop_capture/mac/full_screen_mac_application_handler.cc
@@ -215,6 +215,8 @@ CreateFullScreenMacApplicationHandler(DesktopCapturer::SourceId sourceId) {
       predicate = equal_title_predicate;
     } else if (owner_name == "OpenOffice") {
       return std::make_unique<OpenOfficeApplicationHandler>(sourceId);
+    } else if (name == "wpsoffice") { //+by xxlang@2021-09-09
+      return std::make_unique<OpenOfficeApplicationHandler>(sourceId);
     }
 
     if (predicate) {
diff --git a/modules/desktop_capture/win/full_screen_win_application_handler.cc b/modules/desktop_capture/win/full_screen_win_application_handler.cc
index dd21410b0335e0bdd3b6cc8bf71ebdf6c3e4da3d..4c97b30e426e3b654e6bf0a19f8d5e3df67bfa3e 100644
--- a/modules/desktop_capture/win/full_screen_win_application_handler.cc
+++ b/modules/desktop_capture/win/full_screen_win_application_handler.cc
@@ -265,6 +265,126 @@ std::wstring GetPathByWindowId(HWND window_id) {
   return result;
 }
 
+//+by xxlang@2021-09-08 {
+std::wstring WindowProcessName(HWND window) {
+  std::wstring exe_path = GetPathByWindowId(window);
+  std::wstring file_name = FileNameFromPath(exe_path);
+  std::transform(file_name.begin(), file_name.end(), file_name.begin(), std::towupper);
+  return file_name;
+}
+
+DesktopCapturer::SourceList GetProcessWindows(
+    const DesktopCapturer::SourceList& sources,
+    const std::wstring processName,
+    HWND window_to_exclude) {
+  DesktopCapturer::SourceList result;
+  std::copy_if(sources.begin(), sources.end(), std::back_inserter(result),
+               [&](DesktopCapturer::Source source) {
+                 const HWND source_hwnd = reinterpret_cast<HWND>(source.id);
+                 return window_to_exclude != source_hwnd && WindowProcessName(source_hwnd) == processName;
+               });
+  return result;
+}
+
+class FullScreenWPSHandler : public FullScreenApplicationHandler {
+ public:
+  explicit FullScreenWPSHandler(DesktopCapturer::SourceId sourceId)
+      : FullScreenApplicationHandler(sourceId) {}
+
+  ~FullScreenWPSHandler() override {}
+
+  DesktopCapturer::SourceId FindFullScreenWindow(
+      const DesktopCapturer::SourceList& window_list,
+      int64_t timestamp) const override {
+    if (window_list.empty())
+      return 0;
+
+    HWND original_window = reinterpret_cast<HWND>(GetSourceId());
+
+    DesktopCapturer::SourceList wpp_windows =
+        GetProcessWindows(window_list, L"WPP.EXE", original_window);
+
+    if (wpp_windows.empty())
+      return 0;
+
+    const auto original_document = GetDocumentFromEditorTitle(original_window);
+
+    for (const auto& source : wpp_windows) {
+      HWND window = reinterpret_cast<HWND>(source.id);
+
+      // Looking for slide show window for the same document
+      const auto slideshow_document = GetDocumentFromSlideShowTitleNew(window);
+
+      if (slideshow_document.empty())
+        continue;
+
+      if (slideshow_document.length() > original_document.length())
+        continue;
+
+      if (slideshow_document == original_document.substr(0, slideshow_document.length()))
+        return source.id;
+
+      if (slideshow_document == original_document.substr(original_document.length() - slideshow_document.length(), original_document.length()))
+        return source.id;
+
+      continue;
+    }
+
+    return 0;
+  }
+
+ private:
+  constexpr static char kDocumentTitleSeparator[] = " - ";
+
+  std::string GetDocumentFromEditorTitle(HWND window) const {
+    std::string title = WindowText(window);
+    auto position = title.find(kDocumentTitleSeparator);
+    return rtc::string_trim(title.substr(0, position));
+  }
+
+  std::string GetDocumentFromSlideShowTitle(HWND window) const {
+    std::string title = WindowText(window);
+    auto left_pos = title.find(kDocumentTitleSeparator);
+    auto right_pos = title.rfind(kDocumentTitleSeparator);
+    constexpr size_t kSeparatorLength = arraysize(kDocumentTitleSeparator) - 1;
+    if (left_pos == std::string::npos || right_pos == std::string::npos)
+      return title;
+
+    if (right_pos > left_pos + kSeparatorLength) {
+      auto result_len = right_pos - left_pos - kSeparatorLength;
+      auto document = title.substr(left_pos + kSeparatorLength, result_len);
+      return rtc::string_trim(document);
+    } else {
+      auto document =
+          title.substr(left_pos + kSeparatorLength, std::wstring::npos);
+      return rtc::string_trim(document);
+    }
+  }
+
+  constexpr static char kDocumentTitleSeparatorLeft[] = " - [";
+  constexpr static char kDocumentTitleSeparatorRight[] = "]";
+
+  std::string GetDocumentFromSlideShowTitleNew(HWND window) const {
+    std::string title = WindowText(window);
+    auto left_pos = title.find(kDocumentTitleSeparatorLeft);
+    auto right_pos = title.rfind(kDocumentTitleSeparatorRight);
+    constexpr size_t kSeparatorLength = arraysize(kDocumentTitleSeparatorLeft) - 1;
+    if (left_pos == std::string::npos || right_pos == std::string::npos)
+      return title;
+
+    if (right_pos > left_pos + kSeparatorLength) {
+      auto result_len = right_pos - left_pos - kSeparatorLength;
+      auto document = title.substr(left_pos + kSeparatorLength, result_len);
+      return rtc::string_trim(document);
+    } else {
+      auto document =
+          title.substr(left_pos + kSeparatorLength, std::wstring::npos);
+      return rtc::string_trim(document);
+    }
+  }
+};
+//+by xxlang@2021-09-08 }
+
 }  // namespace
 
 std::unique_ptr<FullScreenApplicationHandler>
@@ -281,6 +401,8 @@ CreateFullScreenWinApplicationHandler(DesktopCapturer::SourceId source_id) {
   } else if (file_name == L"SOFFICE.BIN" &&
              absl::EndsWith(WindowText(hwnd), "OpenOffice Impress")) {
     result = std::make_unique<OpenOfficeApplicationHandler>(source_id);
+  } else if (file_name == L"WPS.EXE") {
+    result = std::make_unique<FullScreenWPSHandler>(source_id); //+by xxlang@2021-09-08
   }
 
   return result;
