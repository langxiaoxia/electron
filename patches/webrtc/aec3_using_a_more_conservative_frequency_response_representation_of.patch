From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jes=C3=BAs=20de=20Vicente=20Pe=C3=B1a?=
 <devicentepena@webrtc.org>
Date: Fri, 10 Sep 2021 14:18:10 +0200
Subject: AEC3: Using a more conservative frequency response representation of
 the tails.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Bug: webrtc:13173
Change-Id: Ic469f6226fe079c306cec6f941eeb70d6d9094f3
Reviewed-on: https://webrtc-review.googlesource.com/c/src/+/231682
Commit-Queue: Jesus de Vicente Pena <devicentepena@webrtc.org>
Reviewed-by: Per Ã…hgren <peah@webrtc.org>
Cr-Commit-Position: refs/heads/main@{#34966}
(cherry picked from commit 5eb5bb50070176caed9e90fb3ba6ffa200a97520)

diff --git a/api/audio/echo_canceller3_config.h b/api/audio/echo_canceller3_config.h
index bc7c6f00194a6b87866ddb94d4ea1b5d19cdfb3f..0df64508726c08ef1e543c5705c37ecb0f5c72fb 100644
--- a/api/audio/echo_canceller3_config.h
+++ b/api/audio/echo_canceller3_config.h
@@ -112,6 +112,7 @@ struct RTC_EXPORT EchoCanceller3Config {
     bool echo_can_saturate = true;
     bool bounded_erl = false;
     bool erle_onset_compensation_in_dominant_nearend = false;
+    bool use_conservative_tail_frequency_response = false;
   } ep_strength;
 
   struct EchoAudibility {
diff --git a/api/audio/echo_canceller3_config_json.cc b/api/audio/echo_canceller3_config_json.cc
index e2c2910dfd583d37c6855fc81a4128f04a802831..3382c46f3cd7c8dc75639c05f679b7c42d3a18d5 100644
--- a/api/audio/echo_canceller3_config_json.cc
+++ b/api/audio/echo_canceller3_config_json.cc
@@ -258,6 +258,8 @@ void Aec3ConfigFromJsonString(absl::string_view json_string,
     ReadParam(section, "bounded_erl", &cfg.ep_strength.bounded_erl);
     ReadParam(section, "erle_onset_compensation_in_dominant_nearend",
               &cfg.ep_strength.erle_onset_compensation_in_dominant_nearend);
+    ReadParam(section, "use_conservative_tail_frequency_response",
+              &cfg.ep_strength.use_conservative_tail_frequency_response);
   }
 
   if (rtc::GetValueFromJsonObject(aec3_root, "echo_audibility", &section)) {
@@ -562,6 +564,10 @@ std::string Aec3ConfigToJsonString(const EchoCanceller3Config& config) {
       << (config.ep_strength.bounded_erl ? "true" : "false") << ",";
   ost << "\"erle_onset_compensation_in_dominant_nearend\": "
       << (config.ep_strength.erle_onset_compensation_in_dominant_nearend
+              ? "true"
+              : "false") << ",";
+  ost << "\"use_conservative_tail_frequency_response\": "
+      << (config.ep_strength.use_conservative_tail_frequency_response
               ? "true"
               : "false");
   ost << "},";
diff --git a/modules/audio_processing/aec3/echo_canceller3.cc b/modules/audio_processing/aec3/echo_canceller3.cc
index a0432e624c2bc28667cb16758401f0e55d51b885..dfa932f49ce08ce2974dc5531470ce266ffe59a5 100644
--- a/modules/audio_processing/aec3/echo_canceller3.cc
+++ b/modules/audio_processing/aec3/echo_canceller3.cc
@@ -286,6 +286,10 @@ EchoCanceller3Config AdjustConfig(const EchoCanceller3Config& config) {
         static_cast<float>(nearend_reverb_nearend_len.Get());
   }
 
+  if (field_trial::IsEnabled("WebRTC-Aec3ConservativeTailFreqResponse")) {
+    adjusted_cfg.ep_strength.use_conservative_tail_frequency_response = true;
+  }
+
   if (field_trial::IsEnabled("WebRTC-Aec3ShortHeadroomKillSwitch")) {
     // Two blocks headroom.
     adjusted_cfg.delay.delay_headroom_samples = kBlockSize * 2;
diff --git a/modules/audio_processing/aec3/reverb_frequency_response.cc b/modules/audio_processing/aec3/reverb_frequency_response.cc
index f4bd91fd48df0b39427b71dd4cced59ce564432f..6e7282a1fcb0514a1dc0b6dcda54111015a20888 100644
--- a/modules/audio_processing/aec3/reverb_frequency_response.cc
+++ b/modules/audio_processing/aec3/reverb_frequency_response.cc
@@ -49,9 +49,13 @@ float AverageDecayWithinFilter(
 
 }  // namespace
 
-ReverbFrequencyResponse::ReverbFrequencyResponse() {
-  tail_response_.fill(0.f);
+ReverbFrequencyResponse::ReverbFrequencyResponse(
+    bool use_conservative_tail_frequency_response)
+    : use_conservative_tail_frequency_response_(
+          use_conservative_tail_frequency_response) {
+  tail_response_.fill(0.0f);
 }
+
 ReverbFrequencyResponse::~ReverbFrequencyResponse() = default;
 
 void ReverbFrequencyResponse::Update(
@@ -88,6 +92,12 @@ void ReverbFrequencyResponse::Update(
     tail_response_[k] = freq_resp_direct_path[k] * average_decay_;
   }
 
+  if (use_conservative_tail_frequency_response_) {
+    for (size_t k = 0; k < kFftLengthBy2Plus1; ++k) {
+      tail_response_[k] = std::max(freq_resp_tail[k], tail_response_[k]);
+    }
+  }
+
   for (size_t k = 1; k < kFftLengthBy2; ++k) {
     const float avg_neighbour =
         0.5f * (tail_response_[k - 1] + tail_response_[k + 1]);
diff --git a/modules/audio_processing/aec3/reverb_frequency_response.h b/modules/audio_processing/aec3/reverb_frequency_response.h
index b16418628b06f4051d4f2cfa75b284d7d290b7d8..69b16b54d0197cfe5a61ef74f9019360b2897cb3 100644
--- a/modules/audio_processing/aec3/reverb_frequency_response.h
+++ b/modules/audio_processing/aec3/reverb_frequency_response.h
@@ -23,7 +23,8 @@ namespace webrtc {
 // Class for updating the frequency response for the reverb.
 class ReverbFrequencyResponse {
  public:
-  ReverbFrequencyResponse();
+  explicit ReverbFrequencyResponse(
+      bool use_conservative_tail_frequency_response);
   ~ReverbFrequencyResponse();
 
   // Updates the frequency response estimate of the reverb.
@@ -44,6 +45,7 @@ class ReverbFrequencyResponse {
               int filter_delay_blocks,
               float linear_filter_quality);
 
+  const bool use_conservative_tail_frequency_response_;
   float average_decay_ = 0.f;
   std::array<float, kFftLengthBy2Plus1> tail_response_;
 };
diff --git a/modules/audio_processing/aec3/reverb_model_estimator.cc b/modules/audio_processing/aec3/reverb_model_estimator.cc
index 717431103f88ac9f969a803e5e50f0275d0d9cc8..5cd7a7870d5265fc33e03cb00c42ef9b8bb64582 100644
--- a/modules/audio_processing/aec3/reverb_model_estimator.cc
+++ b/modules/audio_processing/aec3/reverb_model_estimator.cc
@@ -15,7 +15,10 @@ namespace webrtc {
 ReverbModelEstimator::ReverbModelEstimator(const EchoCanceller3Config& config,
                                            size_t num_capture_channels)
     : reverb_decay_estimators_(num_capture_channels),
-      reverb_frequency_responses_(num_capture_channels) {
+      reverb_frequency_responses_(
+          num_capture_channels,
+          ReverbFrequencyResponse(
+              config.ep_strength.use_conservative_tail_frequency_response)) {
   for (size_t ch = 0; ch < reverb_decay_estimators_.size(); ++ch) {
     reverb_decay_estimators_[ch] =
         std::make_unique<ReverbDecayEstimator>(config);
